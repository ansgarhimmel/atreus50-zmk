/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define L1 1
#define L2 2
#define L3 3  // NUMBERs, F1-12..
#define L4 4  // SPECIAL
#define L5 5  // NUMPAD
#define L6 6  // BL

#define AUML APOS
#define OUML SEMI
#define UUML LBKT
#define DE_SS MINUS
#define DE_MINS SLASH
#define DE_DLLR LS(N4)
#define DE_PCNT LS(N5)
#define DE_AMPSD LS(N6)
#define DE_FSLH LS(N7)
#define DE_PLUS LS(RBRC)
#define DE_STAR RBRC
#define DE_EQUL LS(N0)
#define DE_AT RA(Q)
#define DE_HASH BSLH
#define DE_LT NON_US_BSLH
#define DE_GT LS(NON_US_BSLH)
#define DE_PIPE RA(NON_US_BSLH)
#define DE_BSLH RA(MINUS)



/*
#define LT_BSPC MT(MOD_CMD, KC_BSPC)
#define LT_DEL MT(MOD_RALT, KC_DEL)
#define LT_ENT MT(MOD_RALT, KC_ENT)
#define LT_SPC MT(MOD_CMD, KC_SPC)
#define LT_HASH LT(_NAV,DE_HASH)
#define LT_DQUOT LT(_NAV,S(KC_2))
*/
/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &kp ESC   &kp UUML  &kp O       &kp E    &kp P      &kp Z                                       &kp F          &kp G   &kp T  &kp N    &kp L     &none
    &kp TAB   &kp A     &kp COMMA   &kp DOT  &kp U      &kp I                                       &kp D          &kp H   &kp C  &kp R    &kp S     &kp DE_MINS
    &kp LSHFT &kp OUML  &kp Q       &kp J    &kp K      &kp X                                       &kp B          &kp M   &kp W  &kp V    &kp Y     &kp RSHFT
    &kp LCTL  &kp AUML  &kp DE_HASH &mo L2   &mo L1     &mt LGUI BSPC  &mt LALT DEL &mt LALT ENTER  &mt LGUI SPACE &mo L1  &mo L2 &none    &kp DE_SS &kp RCTL
            >;
        };

        fst_layer {
          bindings = <
    &trans     &kp DE_DLLR    &kp DE_PIPE    &kp DE_BSLH &kp RA(N7) &kp RA(N0)                    &kp DE_PLUS &kp N7     &kp N8     &kp N9     &kp C_PLAY_PAUSE  &kp C_NEXT
    &trans     &kp DE_AT      &kp DE_AMPSD   &kp DE_FSLH &kp LS(N8) &kp LS(N9)                    &kp DE_EQUL &kp N4     &kp N5     &kp N6     &none             &none
    &trans     &kp DE_PCNT    &kp DE_LT      &kp DE_GT   &kp RA(N8) &kp RA(N9)                    &kp DE_STAR &kp N1     &kp N2     &kp N3     &kp RS(BSLH)      &trans
    &trans     &none          &trans         &none       &none      &trans    &trans     &trans   &trans      &kp NUM_0  &mo L3     &kp KP_DOT &none             &trans
          >;
        };
/*
  [_NAV] = LAYOUT(
       XXXXXXX ,XXXXXXX ,KC_F1   ,KC_F2   ,KC_F3   ,KC_F4   ,_______ ,                          _______ ,KC_HOME ,KC_PGUP ,KC_UP   ,KC_PGDN ,KC_END  ,XXXXXXX ,
     XXXXXXX ,KC_MS_L ,KC_F5   ,KC_F6   ,KC_F7   ,KC_F8   ,_______ ,                          _______ ,XXXXXXX ,KC_LEFT ,KC_DOWN ,KC_RIGHT,XXXXXXX ,XXXXXXX ,
     XXXXXXX ,XXXXXXX ,KC_F9   ,KC_F10  ,KC_F11  ,KC_F12  ,_______ ,_______ ,        _______ ,XXXXXXX ,XXXXXXX ,XXXXXXX ,XXXXXXX ,XXXXXXX ,XXXXXXX ,XXXXXXX ,
     XXXXXXX ,XXXXXXX ,XXXXXXX ,XXXXXXX ,     KC_BTN1 ,    KC_BTN2 ,_______ ,        _______ ,_______ ,    XXXXXXX ,     XXXXXXX ,XXXXXXX ,XXXXXXX ,XXXXXXX
  ),
*/
        snd_layer {
          bindings = <
    &none     &reset      &none         &none      &none            &none                     &kp HOME  &kp PG_UP   &kp UP        &kp PG_DN  &kp END          &none
    &none     &none       &none         &none      &none            &none                     &none     &kp LEFT    &kp DOWN      &kp RIGHT  &none            &none
    &none     &bootloader &none         &none      &none            &none                     &none     &none       &none         &none      &none            &none
    &none     &none       &none         &none      &none            &none  &none       &none  &none     &none       &none         &none      &none            &none
          >;
        };

    };
};

